version: '3.9'

# NOTE: local development only
services:
  onetl:
    image: mtsrus/onetl:develop
    build:
      dockerfile: ./docker/Dockerfile
      context: .
      target: base
      args:
        SPARK_VERSION: 3.5.4
    env_file: .env.docker
    volumes:
      - ./:/app/
    networks:
      - onetl
      - default
    ulimits:
      # https://stackoverflow.com/a/56895801
      nofile:
        soft: 10000
        hard: 10000
    # no dependencies from other containers to allow running limited set of tests instead of all

  greenplum:
    image: ${GREENPLUM_IMAGE:-andruche/greenplum:6}
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 5433:5432
    networks:
      - onetl
    extra_hosts:
      - host.docker.internal:host-gateway
    # TODO: remove after https://github.com/andruche/docker-greenplum/pull/2
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1

  clickhouse:
    image: ${CLICKHOUSE_IMAGE:-clickhouse/clickhouse-server:latest-alpine}
    restart: unless-stopped
    ports:
      - 8123:8123
      - 9001:9000
    networks:
      - onetl

  zookeeper:
    image: ${ZOOKEEPER_IMAGE:-bitnami/zookeeper:3.8}
    ports:
      - 2181:2181
    networks:
      - onetl
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: ${KAFKA_IMAGE:-bitnami/kafka:latest}
    restart: unless-stopped
    ports:
      - 9093:9093
      - 9095:9095
    env_file: .env.dependencies
    networks:
      - onetl
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: ${MONGODB_IMAGE:-mongo:latest}
    restart: unless-stopped
    ports:
      - 27017:27017
    env_file: .env.dependencies
    networks:
      - onetl

  mssql:
    image: ${MSSQL_IMAGE:-mcr.microsoft.com/mssql/server:latest}
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 1433:1433
    volumes:
      - ./docker/mssql/:/usr/config/
    entrypoint: ["/usr/config/entrypoint.sh"]
    networks:
      - onetl
    platform: linux/amd64
    healthcheck:
      # Container is healthy only when database is created
      # TODO: replace with SELECT after fixing sqlcmd location: https://github.com/microsoft/mssql-docker/issues/892
      test: ["CMD-SHELL", "ls -lsah /var/opt/mssql/data/onetl.mdf"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: ${MYSQL_IMAGE:-mysql:latest}
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 3306:3306
    networks:
      - onetl
    platform: linux/amd64

  postgres:
    image: ${POSTGRES_IMAGE:-postgres:alpine}
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 5432:5432
    networks:
      - onetl

  hdfs:
    image: ${HDFS_IMAGE:-mtsrus/hadoop:hadoop2-hdfs}
    hostname: hdfs
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 9820:9820 # HDFS IPC
      - 9870:9870 # WebHDFS
      - 9864:9864 # Datanode UI
    volumes:
      - ./docker/hdfs/conf/hadoop/:/var/hadoop/conf/
    networks:
      - onetl

  oracle:
    image: ${ORACLE_IMAGE:-gvenzl/oracle-free:23.3-slim-faststart}
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 1522:1521
    networks:
      - onetl
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 10
    platform: linux/amd64

  ftp:
    image: ${FTP_IMAGE:-chonjay21/ftps:latest}
    restart: unless-stopped
    env_file: .env.dependencies
    environment:
      - USE_SSL=false
      - PASSV_MIN_PORT=30000
      - PASSV_MAX_PORT=30010
    ports:
      - 2121:21
      - 30000-30010:30000-30010
    volumes:
      - ./docker/ftp/on_post_init.sh:/sources/ftps/eventscripts/on_post_init.sh
    networks:
      - onetl

  ftps:
    image: ${FTPS_IMAGE:-chonjay21/ftps:latest}
    restart: unless-stopped
    env_file: .env.dependencies
    environment:
      - USE_SSL=true
      - PASSV_MIN_PORT=30020
      - PASSV_MAX_PORT=30030
    ports:
      - 2122:21
      - 30020-30030:30020-30030
    volumes:
      - ./docker/ftp/on_post_init.sh:/sources/ftps/eventscripts/on_post_init.sh
    networks:
      - onetl

  samba:
    image: ${SAMBA_IMAGE:-elswork/samba}
    restart: unless-stopped
    ports:
      - "139:139"
      - "445:445"
    volumes:
      - ./docker/samba/custom_entrypoint.sh:/custom_entrypoint.sh
    entrypoint: ["/custom_entrypoint.sh"]
    networks:
      - onetl

  s3:
    image: ${S3_IMAGE:-bitnami/minio:latest}
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 9010:9000
      - 9011:9001
    networks:
      - onetl

  sftp:
    image: ${SFTP_IMAGE:-linuxserver/openssh-server}
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 2222:2222
    networks:
      - onetl

  webdav:
    image: ${WEBDAV_IMAGE:-chonjay21/webdav:latest}
    restart: unless-stopped
    env_file: .env.dependencies
    ports:
      - 8000:80
    volumes:
    # Remove after https://github.com/chonjay21/docker-webdav/pull/3
      - ./docker/webdav/on_post_init.sh:/sources/webdav/eventscripts/on_post_init.sh
    networks:
      - onetl

networks:
  onetl:
