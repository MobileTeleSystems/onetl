``ReadOptions`` and ``SQLOptions`` have been separated for JDBC connections. ``SQLOptions`` are recommended for the ``.sql`` method in JDBC connections.
``SQLOptions`` do not support ``partitioning_mode`` and require explicit definition of ``lower_bound`` and ``upper_bound`` when ``num_partitions`` is greater than 1.
``ReadOptions`` allow the inclusion of ``partitioning_mode`` and automatically handle ``lower_bound`` and ``upper_bound`` based on the data distribution

.. code-block:: python

    from onetl.connection import Postgres

    postgres = Postgres(...)
    df = postgres.sql(
        """
        SELECT id, key, CAST(value AS text) value, updated_at
        FROM some.mytable
        WHERE key = 'something'
        """,
        options=Postgres.SQLOptions(
            partition_column="id",
            num_partitions=10,
            lower_bound=0,
            upper_bound=1000,
        ),
    )
