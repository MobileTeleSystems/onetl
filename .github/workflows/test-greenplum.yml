name: Tests for Greenplum
on:
  workflow_call:
    inputs:
      greenplum-version:
        required: true
        type: string
      package-version:
        required: true
        type: string
      spark-version:
        required: true
        type: string
      pydantic-version:
        required: true
        type: string
      java-version:
        required: true
        type: string
      python-version:
        required: true
        type: string
      os:
        required: true
        type: string
      with-cache:
        required: false
        type: boolean
        default: true
    secrets:
      GREENPLUM_PACKAGES_USER:
        required: true
      GREENPLUM_PACKAGES_PASSWORD:
        required: true

jobs:
  test-greenplum:
    if: github.repository == 'MobileTeleSystems/onetl'  # prevent running on forks
    name: Run Greenplum tests (server=${{ inputs.greenplum-version }}, spark=${{ inputs.spark-version }}, pydantic=${{ inputs.pydantic-version }}, java=${{ inputs.java-version }}, python=${{ inputs.python-version }}, os=${{ inputs.os }})
    runs-on: ${{ inputs.os }}
    services:
      greenplum:
        image: andruche/greenplum:${{ inputs.greenplum-version }}
        env:
          TZ: UTC
        ports:
          - 5433:5432
        # TODO: remove after https://github.com/andruche/docker-greenplum/pull/2
        options: --sysctl net.ipv6.conf.all.disable_ipv6=1
      pgbouncer-transaction-gp:
        image: bitnami/pgbouncer:latest
        env:
          TZ: UTC
          PGBOUNCER_DATABASE: postgres
          PGBOUNCER_POOL_MODE: transaction
          POSTGRESQL_HOST: greenplum
          POSTGRESQL_PORT: 5432
          POSTGRESQL_DATABASE: postgres
          POSTGRESQL_USERNAME: gpadmin
          POSTGRESQL_PASSWORD: 123UsedForTestOnly@!
        ports:
          - 6433:6432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java-version }}

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Cache Ivy
        uses: actions/cache@v4
        if: inputs.with-cache
        with:
          path: ~/.ivy2
          key: ${{ runner.os }}-ivy-${{ inputs.spark-version }}-${{ inputs.pydantic-version }}-tests-greenplum-${{ hashFiles('onetl/connection/db_connection/*.py', 'onetl/connection/file_df_connection/*.py') }}
          restore-keys: |
            ${{ runner.os }}-ivy-${{ inputs.spark-version }}-${{ inputs.pydantic-version }}-tests-greenplum-${{ hashFiles('onetl/connection/db_connection/*.py', 'onetl/connection/file_df_connection/*.py') }}
            ${{ runner.os }}-ivy-${{ inputs.spark-version }}-${{ inputs.pydantic-version }}-tests-greenplum-

      - name: Cache pip
        uses: actions/cache@v4
        if: inputs.with-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ inputs.python-version }}-spark-${{ inputs.spark-version }}-pydantic-${{ inputs.pydantic-version }}-tests-spark-${{ hashFiles('requirements/core.txt', 'requirements/tests/base.txt', 'requirements/tests/spark-*.txt', 'requirements/tests/pydantic-*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ inputs.python-version }}-spark-${{ inputs.spark-version }}-pydantic-${{ inputs.pydantic-version }}-tests-spark-${{ hashFiles('requirements/core.txt', 'requirements/tests/base.txt', 'requirements/tests/spark-*.txt', 'requirements/tests/pydantic-*.txt') }}
            ${{ runner.os }}-python-${{ inputs.python-version }}-spark-${{ inputs.spark-version }}-pydantic-${{ inputs.pydantic-version }}-tests-spark-

      - name: Set up Postgres client
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends postgresql-client

      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: |
          pip install -I -r requirements/core.txt -r requirements/tests/base.txt -r requirements/tests/postgres.txt -r requirements/tests/spark-${{ inputs.spark-version }}.txt -r requirements/tests/pydantic-${{ inputs.pydantic-version }}.txt

      - name: Wait for Greenplum to be ready
        run: |
          sed '/^$/d' ./.env.local | sed '/^#/d' | sed 's/^/export /' > ./env
          source ./env

          # Greenplum init script is running very late
          sleep 30

          export PGPASSWORD=$ONETL_GP_PASSWORD
          pg_isready -h localhost -p 5433 -U $ONETL_GP_USER -d $ONETL_GP_DATABASE -t 60

      - name: Run tests
        run: |
          mkdir reports/ || echo "Directory exists"
          sed '/^$/d' ./.env.local | sed '/^#/d' | sed 's/^/export /' > ./env
          source ./env
          export ONETL_GP_PACKAGE_VERSION=${{ inputs.package-version }}
          ./pytest_runner.sh -m greenplum
        env:
          GREENPLUM_PACKAGES_USER: ${{ secrets.GREENPLUM_PACKAGES_USER }}
          GREENPLUM_PACKAGES_PASSWORD: ${{ secrets.GREENPLUM_PACKAGES_PASSWORD }}

      - name: Run tests with PGBouncer
        run: |
          mkdir reports/ || echo "Directory exists"
          sed '/^$/d' ./.env.local | sed '/^#/d' | sed 's/^/export /' > ./env
          source ./env
          export ONETL_GP_PACKAGE_VERSION=${{ inputs.package-version }}
          export ONETL_GP_PORT=6433
          # Run only some basic tests
          ./pytest_runner.sh -m greenplum  -k "tests_core_integration or tests_db_connection_integration"
        env:
          GREENPLUM_PACKAGES_USER: ${{ secrets.GREENPLUM_PACKAGES_USER }}
          GREENPLUM_PACKAGES_PASSWORD: ${{ secrets.GREENPLUM_PACKAGES_PASSWORD }}

      - name: Dump Greenplum logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
        with:
          images: andruche/greenplum,bitnami/pgbouncer
          dest: ./logs

      - name: Upload Greenplum logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: container-logs-greenplum-${{ inputs.greenplum-version }}-spark-${{ inputs.spark-version }}-python-${{ inputs.python-version }}-os-${{ inputs.os }}
          path: logs/*

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-greenplum-${{ inputs.greenplum-version }}-spark-${{ inputs.spark-version }}-python-${{ inputs.python-version }}-os-${{ inputs.os }}
          path: reports/*
          # https://github.com/actions/upload-artifact/issues/602
          include-hidden-files: true
          overwrite: true
